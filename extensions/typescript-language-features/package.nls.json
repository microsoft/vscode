{
	"displayName": "TypeScript and JavaScript Language Features",
	"description": "Provides rich language support for JavaScript and TypeScript.",
	"workspaceTrust": "The extension requires workspace trust when the workspace version is used because it executes code specified by the workspace.",
	"virtualWorkspaces": "In virtual workspaces, resolving and finding references across files is not supported.",
	"reloadProjects.title": "Reload Project",
	"configuration.typescript": "TypeScript",
	"configuration.preferences": "Preferences",
	"configuration.format": "Formatting",
	"configuration.suggest": "Suggestions",
	"configuration.inlayHints": "Inlay Hints",
	"configuration.server": "TS Server",
	"configuration.suggest.completeFunctionCalls": "Complete functions with their parameter signature.",
	"configuration.suggest.includeAutomaticOptionalChainCompletions": "Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires strict null checks to be enabled.",
	"configuration.suggest.includeCompletionsForImportStatements": "Enable/disable auto-import-style completions on partially-typed import statements.",
	"typescript.useTsgo": "Disables TypeScript and JavaScript language features to allow usage of the TypeScript Go experimental extension. Requires TypeScript Go to be installed and configured. Requires reloading extensions after changing this setting.",
	"typescript.tsdk.desc": "Specifies the folder path to the tsserver and `lib*.d.ts` files under a TypeScript install to use for IntelliSense, for example: `./node_modules/typescript/lib`.\n\n- When specified as a user setting, the TypeScript version from `typescript.tsdk` automatically replaces the built-in TypeScript version.\n- When specified as a workspace setting, `typescript.tsdk` allows you to switch to use that workspace version of TypeScript for IntelliSense with the `TypeScript: Select TypeScript version` command.\n\nSee the [TypeScript documentation](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) for more detail about managing TypeScript versions.",
	"typescript.disableAutomaticTypeAcquisition": "Disables [automatic type acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition). Automatic type acquisition fetches `@types` packages from npm to improve IntelliSense for external libraries.",
	"typescript.enablePromptUseWorkspaceTsdk": "Enables prompting of users to use the TypeScript version configured in the workspace for Intellisense.",
	"typescript.tsserver.enableTracing": "Enables tracing TS server performance to a directory. These trace files can be used to diagnose TS Server performance issues. The log may contain file paths, source code, and other potentially sensitive information from your project.",
	"typescript.tsserver.log": "Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.",
	"typescript.tsserver.pluginPaths": "Additional paths to discover TypeScript Language Service plugins.",
	"typescript.tsserver.pluginPaths.item": "Either an absolute or relative path. Relative path will be resolved against workspace folder(s).",
	"typescript.tsserver.trace": "Enables tracing of messages sent to the TS server. This trace can be used to diagnose TS Server issues. The trace may contain file paths, source code, and other potentially sensitive information from your project.",
	"typescript.tsserver.enableRegionDiagnostics": "Enables region-based diagnostics in TypeScript. Requires using TypeScript 5.6+ in the workspace.",
	"typescript.validate.enable": "Enable/disable TypeScript validation.",
	"typescript.format.enable": "Enable/disable default TypeScript formatter.",
	"javascript.format.enable": "Enable/disable default JavaScript formatter.",
	"format.insertSpaceAfterCommaDelimiter": "Defines space handling after a comma delimiter.",
	"format.insertSpaceAfterConstructor": "Defines space handling after the constructor keyword.",
	"format.insertSpaceAfterSemicolonInForStatements": "Defines space handling after a semicolon in a for statement.",
	"format.insertSpaceBeforeAndAfterBinaryOperators": "Defines space handling after a binary operator.",
	"format.insertSpaceAfterKeywordsInControlFlowStatements": "Defines space handling after keywords in a control flow statement.",
	"format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": "Defines space handling after function keyword for anonymous functions.",
	"format.insertSpaceBeforeFunctionParenthesis": "Defines space handling before function argument parentheses.",
	"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": "Defines space handling after opening and before closing non-empty parenthesis.",
	"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": "Defines space handling after opening and before closing non-empty brackets.",
	"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": "Defines space handling after opening and before closing non-empty braces.",
	"format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": "Defines space handling after opening and before closing empty braces.",
	"format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": "Defines space handling after opening and before closing template string braces.",
	"format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": "Defines space handling after opening and before closing JSX expression braces.",
	"format.insertSpaceAfterTypeAssertion": "Defines space handling after type assertions in TypeScript.",
	"format.placeOpenBraceOnNewLineForFunctions": "Defines whether an open brace is put onto a new line for functions or not.",
	"format.placeOpenBraceOnNewLineForControlBlocks": "Defines whether an open brace is put onto a new line for control blocks or not.",
	"format.semicolons": "Defines handling of optional semicolons.",
	"format.semicolons.ignore": "Don't insert or remove any semicolons.",
	"format.semicolons.insert": "Insert semicolons at statement ends.",
	"format.semicolons.remove": "Remove unnecessary semicolons.",
	"format.indentSwitchCase": "Indent case clauses in switch statements. Requires using TypeScript 5.1+ in the workspace.",
	"javascript.validate.enable": "Enable/disable JavaScript validation.",
	"javascript.goToProjectConfig.title": "Go to Project Configuration (jsconfig / tsconfig)",
	"typescript.goToProjectConfig.title": "Go to Project Configuration (tsconfig)",
	"javascript.referencesCodeLens.enabled": "Enable/disable references CodeLens in JavaScript files.",
	"javascript.referencesCodeLens.showOnAllFunctions": "Enable/disable references CodeLens on all functions in JavaScript files.",
	"typescript.referencesCodeLens.enabled": "Enable/disable references CodeLens in TypeScript files.",
	"typescript.referencesCodeLens.showOnAllFunctions": "Enable/disable references CodeLens on all functions in TypeScript files.",
	"typescript.implementationsCodeLens.enabled": "Enable/disable implementations CodeLens. This CodeLens shows the implementers of an interface.",
	"typescript.implementationsCodeLens.showOnInterfaceMethods": "Enable/disable implementations CodeLens on interface methods.",
	"typescript.openTsServerLog.title": "Open TS Server log",
	"typescript.restartTsServer": "Restart TS Server",
	"typescript.selectTypeScriptVersion.title": "Select TypeScript Version...",
	"typescript.reportStyleChecksAsWarnings": "Report style checks as warnings.",
	"typescript.npm": "Specifies the path to the npm executable used for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).",
	"typescript.check.npmIsInstalled": "Check if npm is installed for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).",
	"configuration.suggest.names": "Enable/disable including unique names from the file in JavaScript suggestions. Note that name suggestions are always disabled in JavaScript code that is semantically checked using `@ts-check` or `checkJs`.",
	"typescript.tsc.autoDetect": "Controls auto detection of tsc tasks.",
	"typescript.tsc.autoDetect.off": "Disable this feature.",
	"typescript.tsc.autoDetect.on": "Create both build and watch tasks.",
	"typescript.tsc.autoDetect.build": "Only create single run compile tasks.",
	"typescript.tsc.autoDetect.watch": "Only create compile and watch tasks.",
	"typescript.problemMatchers.tsc.label": "TypeScript problems",
	"typescript.problemMatchers.tscWatch.label": "TypeScript problems (watch mode)",
	"configuration.suggest.paths": "Enable/disable suggestions for paths in import statements and require calls.",
	"configuration.tsserver.useSeparateSyntaxServer": "Enable/disable spawning a separate TypeScript server that can more quickly respond to syntax related operations, such as calculating folding or computing document symbols.",
	"configuration.tsserver.useSyntaxServer": "Controls if TypeScript launches a dedicated server to more quickly handle syntax related operations, such as computing code folding.",
	"configuration.tsserver.useSyntaxServer.always": "Use a lighter weight syntax server to handle all IntelliSense operations. This syntax server can only provide IntelliSense for opened files.",
	"configuration.tsserver.useSyntaxServer.never": "Don't use a dedicated syntax server. Use a single server to handle all IntelliSense operations.",
	"configuration.tsserver.useSyntaxServer.auto": "Spawn both a full server and a lighter weight server dedicated to syntax operations. The syntax server is used to speed up syntax operations and provide IntelliSense while projects are loading.",
	"configuration.tsserver.maxTsServerMemory": "The maximum amount of memory (in MB) to allocate to the TypeScript server process. To use a memory limit greater than 4 GB, use `#typescript.tsserver.nodePath#` to run TS Server with a custom Node installation.",
	"configuration.tsserver.experimental.enableProjectDiagnostics": "Enables project wide error reporting.",
	"typescript.locale": "Sets the locale used to report JavaScript and TypeScript errors. Defaults to use VS Code's locale.",
	"typescript.locale.auto": "Use VS Code's configured display language.",
	"configuration.implicitProjectConfig.module": "Sets the module system for the program. See more: https://www.typescriptlang.org/tsconfig#module.",
	"configuration.implicitProjectConfig.target": "Set target JavaScript language version for emitted JavaScript and include library declarations. See more: https://www.typescriptlang.org/tsconfig#target.",
	"configuration.implicitProjectConfig.checkJs": "Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
	"configuration.implicitProjectConfig.experimentalDecorators": "Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
	"configuration.implicitProjectConfig.strictNullChecks": "Enable/disable [strict null checks](https://www.typescriptlang.org/tsconfig#strictNullChecks) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
	"configuration.implicitProjectConfig.strictFunctionTypes": "Enable/disable [strict function types](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
	"configuration.implicitProjectConfig.strict": "Enable/disable [strict mode](https://www.typescriptlang.org/tsconfig#strict) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.",
	"configuration.suggest.jsdoc.generateReturns": "Enable/disable generating `@returns` annotations for JSDoc templates.",
	"configuration.suggest.autoImports": "Enable/disable auto import suggestions.",
	"configuration.preferGoToSourceDefinition": "Makes `Go to Definition` avoid type declaration files when possible by triggering `Go to Source Definition` instead. This allows `Go to Source Definition` to be triggered with the mouse gesture.",
	"inlayHints.parameterNames.none": "Disable parameter name hints.",
	"inlayHints.parameterNames.literals": "Enable parameter name hints only for literal arguments.",
	"inlayHints.parameterNames.all": "Enable parameter name hints for literal and non-literal arguments.",
	"configuration.inlayHints.parameterNames.enabled": {
		"message": "Enable/disable inlay hints for parameter names:\n```typescript\n\nparseInt(/* str: */ '123', /* radix: */ 8)\n \n```",
		"comment": [
			"The text inside the ``` block is code and should not be localized."
		]
	},
	"configuration.inlayHints.parameterNames.suppressWhenArgumentMatchesName": "Suppress parameter name hints on arguments whose text is identical to the parameter name.",
	"configuration.inlayHints.parameterTypes.enabled": {
		"message": "Enable/disable inlay hints for implicit parameter types:\n```typescript\n\nel.addEventListener('click', e /* :MouseEvent */ => ...)\n \n```",
		"comment": [
			"The text inside the ``` block is code and should not be localized."
		]
	},
	"configuration.inlayHints.variableTypes.enabled": {
		"message": "Enable/disable inlay hints for implicit variable types:\n```typescript\n\nconst foo /* :number */ = Date.now();\n \n```",
		"comment": [
			"The text inside the ``` block is code and should not be localized."
		]
	},
	"configuration.inlayHints.variableTypes.suppressWhenTypeMatchesName": "Suppress type hints on variables whose name is identical to the type name.",
	"configuration.inlayHints.propertyDeclarationTypes.enabled": {
		"message": "Enable/disable inlay hints for implicit types on property declarations:\n```typescript\n\nclass Foo {\n\tprop /* :number */ = Date.now();\n}\n \n```",
		"comment": [
			"The text inside the ``` block is code and should not be localized."
		]
	},
	"configuration.inlayHints.functionLikeReturnTypes.enabled": {
		"message": "Enable/disable inlay hints for implicit return types on function signatures:\n```typescript\n\nfunction foo() /* :number */ {\n\treturn Date.now();\n} \n \n```",
		"comment": [
			"The text inside the ``` block is code and should not be localized."
		]
	},
	"configuration.inlayHints.enumMemberValues.enabled": {
		"message": "Enable/disable inlay hints for member values in enum declarations:\n```typescript\n\nenum MyValue {\n\tA /* = 0 */;\n\tB /* = 1 */;\n}\n \n```",
		"comment": [
			"The text inside the ``` block is code and should not be localized."
		]
	},
	"taskDefinition.tsconfig.description": "The tsconfig file that defines the TS build.",
	"javascript.suggestionActions.enabled": "Enable/disable suggestion diagnostics for JavaScript files in the editor.",
	"typescript.suggestionActions.enabled": "Enable/disable suggestion diagnostics for TypeScript files in the editor.",
	"typescript.preferences.quoteStyle": "Preferred quote style to use for Quick Fixes.",
	"typescript.preferences.quoteStyle.single": "Always use single quotes: `'`",
	"typescript.preferences.quoteStyle.double": "Always use double quotes: `\"`",
	"typescript.preferences.quoteStyle.auto": "Infer quote type from existing code",
	"typescript.preferences.importModuleSpecifier": "Preferred path style for auto imports.",
	"typescript.preferences.importModuleSpecifier.shortest": "Prefers a non-relative import only if one is available that has fewer path segments than a relative import.",
	"typescript.preferences.importModuleSpecifier.relative": "Prefers a relative path to the imported file location.",
	"typescript.preferences.importModuleSpecifier.nonRelative": "Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.",
	"typescript.preferences.importModuleSpecifier.projectRelative": "Prefers a non-relative import only if the relative import path would leave the package or project directory.",
	"typescript.preferences.importModuleSpecifierEnding": "Preferred path ending for auto imports.",
	"typescript.preferences.importModuleSpecifierEnding.label.js": ".js / .ts",
	"typescript.preferences.importModuleSpecifierEnding.auto": "Use project settings to select a default.",
	"typescript.preferences.importModuleSpecifierEnding.minimal": "Shorten `./component/index.js` to `./component`.",
	"typescript.preferences.importModuleSpecifierEnding.index": "Shorten `./component/index.js` to `./component/index`.",
	"typescript.preferences.importModuleSpecifierEnding.js": "Do not shorten path endings; include the `.js` or `.ts` extension.",
	"typescript.preferences.jsxAttributeCompletionStyle": "Preferred style for JSX attribute completions.",
	"javascript.preferences.jsxAttributeCompletionStyle.auto": "Insert `={}` or `=\"\"` after attribute names based on the prop type. See `#javascript.preferences.quoteStyle#` to control the type of quotes used for string attributes.",
	"typescript.preferences.jsxAttributeCompletionStyle.auto": "Insert `={}` or `=\"\"` after attribute names based on the prop type. See `#typescript.preferences.quoteStyle#` to control the type of quotes used for string attributes.",
	"typescript.preferences.jsxAttributeCompletionStyle.braces": "Insert `={}` after attribute names.",
	"typescript.preferences.jsxAttributeCompletionStyle.none": "Only insert attribute names.",
	"typescript.preferences.includePackageJsonAutoImports": "Enable/disable searching `package.json` dependencies for available auto imports.",
	"typescript.preferences.includePackageJsonAutoImports.auto": "Search dependencies based on estimated performance impact.",
	"typescript.preferences.includePackageJsonAutoImports.on": "Always search dependencies.",
	"typescript.preferences.includePackageJsonAutoImports.off": "Never search dependencies.",
	"typescript.preferences.autoImportFileExcludePatterns": "Specify glob patterns of files to exclude from auto imports. Relative paths are resolved relative to the workspace root. Patterns are evaluated using tsconfig.json [`exclude`](https://www.typescriptlang.org/tsconfig#exclude) semantics.",
	"typescript.preferences.autoImportSpecifierExcludeRegexes": "Specify regular expressions to exclude auto imports with matching import specifiers. Examples:\n\n- `^node:`\n- `lib/internal` (slashes don't need to be escaped...)\n- `/lib\\/internal/i` (...unless including surrounding slashes for `i` or `u` flags)\n- `^lodash$` (only allow subpath imports from lodash)",
	"typescript.preferences.preferTypeOnlyAutoImports": "Include the `type` keyword in auto-imports whenever possible. Requires using TypeScript 5.3+ in the workspace.",
	"typescript.workspaceSymbols.excludeLibrarySymbols": "Exclude symbols that come from library files in `Go to Symbol in Workspace` results. Requires using TypeScript 5.3+ in the workspace.",
	"typescript.updateImportsOnFileMove.enabled": "Enable/disable automatic updating of import paths when you rename or move a file in VS Code.",
	"typescript.updateImportsOnFileMove.enabled.prompt": "Prompt on each rename.",
	"typescript.updateImportsOnFileMove.enabled.always": "Always update paths automatically.",
	"typescript.updateImportsOnFileMove.enabled.never": "Never rename paths and don't prompt.",
	"typescript.autoClosingTags": "Enable/disable automatic closing of JSX tags.",
	"typescript.suggest.enabled": "Enable/disable autocomplete suggestions.",
	"configuration.suggest.completeJSDocs": "Enable/disable suggestion to complete JSDoc comments.",
	"configuration.tsserver.useVsCodeWatcher": "Use VS Code's file watchers instead of TypeScript's. Requires using TypeScript 5.4+ in the workspace.",
	"configuration.tsserver.watchOptions": "Configure which watching strategies should be used to keep track of files and directories.",
	"configuration.tsserver.watchOptions.vscode": "Use VS Code's file watchers instead of TypeScript's. Requires using TypeScript 5.4+ in the workspace.",
	"configuration.tsserver.watchOptions.watchFile": "Strategy for how individual files are watched.",
	"configuration.tsserver.watchOptions.watchFile.fixedChunkSizePolling": "Polls files in chunks at regular interval.",
	"configuration.tsserver.watchOptions.watchFile.fixedPollingInterval": "Check every file for changes several times a second at a fixed interval.",
	"configuration.tsserver.watchOptions.watchFile.priorityPollingInterval": "Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others.",
	"configuration.tsserver.watchOptions.watchFile.dynamicPriorityPolling": "Use a dynamic queue where less-frequently modified files will be checked less often.",
	"configuration.tsserver.watchOptions.watchFile.useFsEvents": "Attempt to use the operating system/file system's native events for file changes.",
	"configuration.tsserver.watchOptions.watchFile.useFsEventsOnParentDirectory": "Attempt to use the operating system/file system's native events to listen for changes on a file's containing directories. This can use fewer file watchers, but might be less accurate.",
	"configuration.tsserver.watchOptions.watchDirectory": "Strategy for how entire directory trees are watched under systems that lack recursive file-watching functionality.",
	"configuration.tsserver.watchOptions.watchDirectory.fixedChunkSizePolling": "Polls directories in chunks at regular interval.",
	"configuration.tsserver.watchOptions.watchDirectory.fixedPollingInterval": "Check every directory for changes several times a second at a fixed interval.",
	"configuration.tsserver.watchOptions.watchDirectory.dynamicPriorityPolling": "Use a dynamic queue where less-frequently modified directories will be checked less often.",
	"configuration.tsserver.watchOptions.watchDirectory.useFsEvents": "Attempt to use the operating system/file system's native events for directory changes.",
	"configuration.tsserver.watchOptions.fallbackPolling": "When using file system events, this option specifies the polling strategy that gets used when the system runs out of native file watchers and/or doesn't support native file watchers.",
	"configuration.tsserver.watchOptions.fallbackPolling.fixedPollingInterval": "Check every file for changes several times a second at a fixed interval.",
	"configuration.tsserver.watchOptions.fallbackPolling.priorityPollingInterval": "Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others.",
	"configuration.tsserver.watchOptions.fallbackPolling.dynamicPriorityPolling ": "Use a dynamic queue where less-frequently modified files will be checked less often.",
	"configuration.tsserver.watchOptions.synchronousWatchDirectory": "Disable deferred watching on directories. Deferred watching is useful when lots of file changes might occur at once (e.g. a change in node_modules from running npm install), but you might want to disable it with this flag for some less-common setups.",
	"typescript.preferences.useAliasesForRenames": "Enable/disable introducing aliases for object shorthand properties during renames.",
	"typescript.preferences.renameMatchingJsxTags": "When on a JSX tag, try to rename the matching tag instead of renaming the symbol. Requires using TypeScript 5.1+ in the workspace.",
	"typescript.preferences.organizeImports": "Advanced preferences that control how imports are ordered.",
	"javascript.preferences.organizeImports": "Advanced preferences that control how imports are ordered.",
	"typescript.preferences.organizeImports.caseSensitivity": "Specifies how imports should be sorted with regards to case-sensitivity. If `auto` or unspecified, we will detect the case-sensitivity per file",
	"typescript.preferences.organizeImports.caseSensitivity.auto": "Detect case-sensitivity for import sorting.",
	"typescript.preferences.organizeImports.caseSensitivity.insensitive": "Sort imports case-insensitively.",
	"typescript.preferences.organizeImports.caseSensitivity.sensitive": "Sort imports case-sensitively.",
	"typescript.preferences.organizeImports.typeOrder": "Specify how type-only named imports should be sorted.",
	"typescript.preferences.organizeImports.typeOrder.auto": "Detect where type-only named imports should be sorted.",
	"typescript.preferences.organizeImports.typeOrder.last": "Type only named imports are sorted to the end of the import list. E.g. `import { B, Z, type A, type Y } from 'module';`",
	"typescript.preferences.organizeImports.typeOrder.inline": "Named imports are sorted by name only. E.g. `import { type A, B, type Y, Z } from 'module';`",
	"typescript.preferences.organizeImports.typeOrder.first": "Type only named imports are sorted to the beginning of the import list. E.g. `import { type A, type Y, B, Z } from 'module';`",
	"typescript.preferences.organizeImports.unicodeCollation": "Specify whether to sort imports using Unicode or Ordinal collation.",
	"typescript.preferences.organizeImports.unicodeCollation.ordinal": "Sort imports using the numeric value of each code point.",
	"typescript.preferences.organizeImports.unicodeCollation.unicode": "Sort imports using the Unicode code collation.",
	"typescript.preferences.organizeImports.locale": "Requires `organizeImports.unicodeCollation: 'unicode'`. Overrides the locale used for collation. Specify `auto` to use the UI locale.",
	"typescript.preferences.organizeImports.caseFirst": "Requires `organizeImports.unicodeCollation: 'unicode'`, and `organizeImports.caseSensitivity` is not `caseInsensitive`. Indicates whether upper-case will sort before lower-case.",
	"typescript.preferences.organizeImports.caseFirst.default": "Default order given by `locale`.",
	"typescript.preferences.organizeImports.caseFirst.lower": "Lower-case comes before upper-case. E.g.` a, A, z, Z`.",
	"typescript.preferences.organizeImports.caseFirst.upper": "Upper-case comes before lower-case. E.g. ` A, a, B, b`.",
	"typescript.preferences.organizeImports.numericCollation": "Requires `organizeImports.unicodeCollation: 'unicode'`. Sort numeric strings by integer value.",
	"typescript.preferences.organizeImports.accentCollation": "Requires `organizeImports.unicodeCollation: 'unicode'`. Compare characters with diacritical marks as unequal to base character.",
	"typescript.workspaceSymbols.scope": "Controls which files are searched by [Go to Symbol in Workspace](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name).",
	"typescript.workspaceSymbols.scope.allOpenProjects": "Search all open JavaScript or TypeScript projects for symbols.",
	"typescript.workspaceSymbols.scope.currentProject": "Only search for symbols in the current JavaScript or TypeScript project.",
	"typescript.sortImports": "Sort Imports",
	"typescript.removeUnusedImports": "Remove Unused Imports",
	"typescript.findAllFileReferences": "Find File References",
	"typescript.goToSourceDefinition": "Go to Source Definition",
	"configuration.suggest.classMemberSnippets.enabled": "Enable/disable snippet completions for class members.",
	"configuration.suggest.objectLiteralMethodSnippets.enabled": "Enable/disable snippet completions for methods in object literals.",
	"configuration.tsserver.web.projectWideIntellisense.enabled": "Enable/disable project-wide IntelliSense on web. Requires that VS Code is running in a trusted context.",
	"configuration.tsserver.web.projectWideIntellisense.suppressSemanticErrors": "Suppresses semantic errors on web even when project wide IntelliSense is enabled. This is always on when project wide IntelliSense is not enabled or available. See `#typescript.tsserver.web.projectWideIntellisense.enabled#`",
	"configuration.tsserver.web.typeAcquisition.enabled": "Enable/disable package acquisition on the web. This enables IntelliSense for imported packages. Requires `#typescript.tsserver.web.projectWideIntellisense.enabled#`. Currently not supported for Safari.",
	"configuration.tsserver.nodePath": "Run TS Server on a custom Node installation. This can be a path to a Node executable, or 'node' if you want VS Code to detect a Node installation.",
	"configuration.updateImportsOnPaste": "Automatically update imports when pasting code. Requires TypeScript 5.6+.",
	"configuration.hover.maximumLength": "The maximum number of characters in a hover. If the hover is longer than this, it will be truncated. Requires TypeScript 5.9+.",
	"walkthroughs.nodejsWelcome.title": "Get started with JavaScript and Node.js",
	"walkthroughs.nodejsWelcome.description": "Make the most of Visual Studio Code's first-class JavaScript experience.",
	"walkthroughs.nodejsWelcome.downloadNode.forMacOrWindows.title": "Install Node.js",
	"walkthroughs.nodejsWelcome.downloadNode.forMacOrWindows.description": "Node.js is an easy way to run JavaScript code. You can use it to quickly build command-line apps and servers. It also comes with npm, a package manager which makes reusing and sharing JavaScript code easy.\n[Install Node.js](https://nodejs.org/en/download/)",
	"walkthroughs.nodejsWelcome.downloadNode.forLinux.title": "Install Node.js",
	"walkthroughs.nodejsWelcome.downloadNode.forLinux.description": "Node.js is an easy way to run JavaScript code. You can use it to quickly build command-line apps and servers. It also comes with npm, a package manager which makes reusing and sharing JavaScript code easy.\n[Install Node.js](https://nodejs.org/en/download/package-manager/)",
	"walkthroughs.nodejsWelcome.makeJsFile.title": "Create a JavaScript File",
	"walkthroughs.nodejsWelcome.makeJsFile.description": "Let's write our first JavaScript file. We'll have to create a new file and save it with the ``.js`` extension at the end of the file name.\n[Create a JavaScript File](command:javascript-walkthrough.commands.createJsFile)",
	"walkthroughs.nodejsWelcome.debugJsFile.title": "Run and Debug your JavaScript",
	"walkthroughs.nodejsWelcome.debugJsFile.description": "Once you've installed Node.js, you can run JavaScript programs at a terminal by entering ``node your-file-name.js``\nAnother easy way to run Node.js programs is by using VS Code's debugger which lets you run your code, pause at different points, and help you understand what's going on step-by-step.\n[Start Debugging](command:javascript-walkthrough.commands.debugJsFile)",
	"walkthroughs.nodejsWelcome.debugJsFile.altText": "Debug and run your JavaScript code in Node.js with Visual Studio Code.",
	"walkthroughs.nodejsWelcome.learnMoreAboutJs.title": "Explore More",
	"walkthroughs.nodejsWelcome.learnMoreAboutJs.description": "Want to get more comfortable with JavaScript, Node.js, and VS Code? Be sure to check out our docs!\nWe've got lots of resources for learning [JavaScript](https://code.visualstudio.com/docs/nodejs/working-with-javascript) and [Node.js](https://code.visualstudio.com/docs/nodejs/nodejs-tutorial).\n\n[Learn More](https://code.visualstudio.com/docs/nodejs/nodejs-tutorial)",
	"walkthroughs.nodejsWelcome.learnMoreAboutJs.altText": "Learn more about JavaScript and Node.js in Visual Studio Code."
}

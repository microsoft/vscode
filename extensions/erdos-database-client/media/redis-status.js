/*---------------------------------------------------------------------------------------------
 *  Copyright (c) 2025 Lotas Inc. All rights reserved.
 *--------------------------------------------------------------------------------------------*/

var r=class{constructor(){this.autoRefresh=!1,this.connectionStatus={},this.dbKeyStats=[],this.allRedisInfo=[],this.refreshTimer=null,this.refreshInterval=2e3,this.init()}init(){this.setupEventListeners(),this.setupVSCodeMessaging(),this.initializeElements(),this.refreshInit()}initializeElements(){if(this.autoRefreshToggle=document.getElementById("autoRefreshToggle"),this.redisVersion=document.getElementById("redisVersion"),this.osInfo=document.getElementById("osInfo"),this.processId=document.getElementById("processId"),this.usedMemory=document.getElementById("usedMemory"),this.usedMemoryPeak=document.getElementById("usedMemoryPeak"),this.usedMemoryLua=document.getElementById("usedMemoryLua"),this.connectedClients=document.getElementById("connectedClients"),this.totalConnections=document.getElementById("totalConnections"),this.totalCommands=document.getElementById("totalCommands"),this.keyStatsTable=document.getElementById("keyStatsTable"),this.allInfoTable=document.getElementById("allInfoTable"),!this.autoRefreshToggle){console.error("Required DOM elements not found");return}}setupEventListeners(){document.addEventListener("change",t=>{t.target&&t.target.id==="autoRefreshToggle"&&this.toggleAutoRefresh(t.target.checked)}),document.addEventListener("click",t=>{if(t.target&&t.target.classList.contains("sortable")){let e=t.target.dataset.sort;e&&this.sortTable(e)}})}setupVSCodeMessaging(){window.addEventListener("message",t=>{let e=t.data;switch(e.type){case"info":this.initStatus(e.info);break;case"error":this.showError(e.message);break}})}toggleAutoRefresh(t){this.autoRefresh=t,this.refreshInit()}initStatus(t){if(!t)return{};let e=t.split(`
`),n={};for(let s of e){if(s=s.replace(/\s/gi,""),s.startsWith("#")||!s)continue;let o=s.split(":");n[o[0]]=o[1]}this.connectionStatus=n,this.updateServerInfo(),this.updateMemoryInfo(),this.updateStatsInfo(),this.updateKeyStatsTable(),this.updateAllInfoTable()}updateServerInfo(){this.redisVersion&&(this.redisVersion.textContent=this.connectionStatus.redis_version||"-"),this.osInfo&&(this.osInfo.textContent=this.connectionStatus.os||"-",this.osInfo.title=this.connectionStatus.os||""),this.processId&&(this.processId.textContent=this.connectionStatus.process_id||"-")}updateMemoryInfo(){if(this.usedMemory&&(this.usedMemory.textContent=this.connectionStatus.used_memory_human||"-"),this.usedMemoryPeak&&(this.usedMemoryPeak.textContent=this.connectionStatus.used_memory_peak_human||"-"),this.usedMemoryLua){let t=this.connectionStatus.used_memory_lua;this.usedMemoryLua.textContent=t?Math.round(t/1024)+"K":"-"}}updateStatsInfo(){this.connectedClients&&(this.connectedClients.textContent=this.connectionStatus.connected_clients||"-"),this.totalConnections&&(this.totalConnections.textContent=this.connectionStatus.total_connections_received||"-"),this.totalCommands&&(this.totalCommands.textContent=this.connectionStatus.total_commands_processed||"-")}updateKeyStatsTable(){if(!this.keyStatsTable)return;let t=this.keyStatsTable.querySelector("tbody");if(!t)return;t.innerHTML="",this.getDBKeys().forEach(n=>{let s=document.createElement("tr");s.innerHTML=`
                <td>${n.db}</td>
                <td>${n.keys}</td>
                <td>${n.expires}</td>
                <td>${n.avg_ttl}</td>
            `,t.appendChild(s)})}updateAllInfoTable(){if(!this.allInfoTable)return;let t=this.allInfoTable.querySelector("tbody");if(!t)return;t.innerHTML="",this.getAllRedisInfo().forEach(n=>{let s=document.createElement("tr");s.innerHTML=`
                <td>${n.key}</td>
                <td>${n.value}</td>
            `,t.appendChild(s)})}sortTable(t){let e=this.getDBKeys();switch(t){case"keys":e.sort(this.sortByKeys);break;case"expires":e.sort(this.sortByExpires);break;case"avg_ttl":e.sort(this.sortByTTL);break}this.dbKeyStats=e,this.updateKeyStatsTable(),document.querySelectorAll(".sortable").forEach(o=>{o.classList.remove("sorted-asc","sorted-desc")});let s=document.querySelector(`[data-sort="${t}"]`);s&&s.classList.add("sorted-desc")}showError(t){console.error("Redis Status Error:",t),i.postMessage({type:"showMessage",level:"error",message:`Redis Status Error: ${t}`})}refreshStatus(){i.postMessage({type:"refreshStatus"})}refreshInit(){this.refreshTimer&&clearInterval(this.refreshTimer),this.refreshTimer=setInterval(()=>{this.autoRefresh&&i.postMessage({type:"route",routeName:"redisStatus"})},this.refreshInterval)}getDBKeys(){let t=[];for(let e in this.connectionStatus)if(e.startsWith("db")){let s=this.connectionStatus[e].split(",");t.push({db:e,keys:parseInt(s[0].split("=")[1])||0,expires:parseInt(s[1].split("=")[1])||0,avg_ttl:parseInt(s[2].split("=")[1])||0})}return t}getAllRedisInfo(){let t=[];for(let e in this.connectionStatus)t.push({key:e,value:this.connectionStatus[e]});return t}sortByKeys(t,e){return t.keys-e.keys}sortByExpires(t,e){return t.expires-e.expires}sortByTTL(t,e){return t.avg_ttl-e.avg_ttl}},i=acquireVsCodeApi();document.addEventListener("DOMContentLoaded",()=>{new r});

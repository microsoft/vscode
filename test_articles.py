#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç–µ–π
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from create_articles import ArticleGenerator


def test_article_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ç–∞—Ç–µ–π –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç–µ–π")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    generator = ArticleGenerator("test-key", test_mode=True)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ç–∞—Ç—å–∏
    test_topic = "–¢–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
    success = generator.generate_article(test_topic)
    
    if success:
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: —Å—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        output_files = list(generator.output_dir.glob("*.html"))
        if output_files:
            latest_file = max(output_files, key=lambda f: f.stat().st_mtime)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {latest_file}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            with open(latest_file, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            required_elements = [
                '<!DOCTYPE html>',
                '<html lang="ru">',
                '<meta charset="UTF-8">',
                'class="interactive-container"',
                'class="chapter"',
                'class="info-block"',
                'class="date-box"',
                'class="fact-box"',
                'class="special-box"',
                'class="quiz-container"',
                'data-question=',
                'data-correct=',
                'function updateProgress()',
                'function checkAnswers()',
                '_progress_bar"',  # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
                '_final_score"'    # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
            ]
            
            missing_elements = []
            for element in required_elements:
                if element not in content:
                    missing_elements.append(element)
            
            if missing_elements:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã: {missing_elements}")
                return False
            else:
                print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                return True
        else:
            print("‚ùå –§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
            return False
    else:
        print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏")
        return False


def test_filename_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤")
    print("-" * 30)
    
    generator = ArticleGenerator("test-key", test_mode=True)
    
    test_topics = [
        "–ü—Ä–æ—Å—Ç–∞—è —Ç–µ–º–∞",
        "–¢–µ–º–∞ —Å —Å–∏–º–≤–æ–ª–∞–º–∏ @#$%^&*()",
        "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è —Ç–µ–º–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Å–ª–æ–≤ –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω–∞ –¥–æ —Ä–∞–∑—É–º–Ω–æ–π –¥–ª–∏–Ω—ã",
        "–¢–µ–º–∞ —Å —ç–º–æ–¥–∑–∏ üöÄüìöüí°",
        "English Topic Mixed –†—É—Å—Å–∫–∏–π"
    ]
    
    for topic in test_topics:
        filename = generator.generate_unique_filename(topic)
        print(f"'{topic}' -> '{filename}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞ –≤–∞–ª–∏–¥–Ω–æ–µ
        if filename.endswith('.html') and 'article_' in filename:
            print("  ‚úÖ –í–∞–ª–∏–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞")
        else:
            print("  ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞")
            return False
    
    return True


def test_id_prefix_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤")
    print("-" * 30)
    
    generator = ArticleGenerator("test-key", test_mode=True)
    
    prefixes = set()
    for i in range(10):
        prefix = generator.generate_id_prefix()
        print(f"–ü—Ä–µ—Ñ–∏–∫—Å {i+1}: {prefix}")
        
        if prefix in prefixes:
            print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –ø—Ä–µ—Ñ–∏–∫—Å–∞")
            return False
        
        prefixes.add(prefix)
        
        if not prefix.startswith('art_') or len(prefix) != 12:
            print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–µ—Ñ–∏–∫—Å–∞: {prefix}")
            return False
    
    print("‚úÖ –í—Å–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã –∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    return True


def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üöÄ –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç–µ–π")
    print("=" * 50)
    
    tests = [
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–µ–π", test_article_generation),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤", test_filename_generation),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤", test_id_prefix_generation)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã –¢–µ—Å—Ç: {test_name}")
        try:
            if test_func():
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)